package com.marmend.clerk.service

import com.marmend.clerk.model.{GoogleCredential, RefreshTokenResponse, TokenResponse, User}
import org.http4s.UriTemplate._

import org.http4s.Uri
import org.http4s.UriTemplate
import org.http4s.Uri.RegName
import scalaj.http._
import org.http4s.syntax.string._


/**
 * Created by maksim on 8/10/17.
 */

class AuthService {

  private val credentials = loadApp

  /** This function build a link for allowing user to grant permission to current service to use google api
    * which associated with user.email
    * @param user - email
    * @return a link which needs to be clicked in browser to grant permission and generate access/refresh tokens
    */

  def userUri(user: User) = {
    val template = UriTemplate(
      authority = Some(Uri.Authority(host = Uri.RegName("accounts.google.com/o/oauth2/auth"))),
      scheme = Some("https".ci),
      query = List(
        ParamElm("response_type", "code"),
        ParamElm("client_id", credentials.clientId),
        ParamElm("redirect_uri", credentials.redirectUrl),
        ParamElm("scope", credentials.scopes.mkString(" ")),
        ParamElm("state", "beekeeper!"),
        ParamElm("login_hint", user.email),
        ParamElm("include_granted_scopes", "true")
      ))
    template.toUriIfPossible
  }

  /** Create credentials for user
    *
    * @param code - the code generated by google to allow get access token in Oauth2
    * @param user - User.email
    * @return - access/refresh Oauth tokens for user entity
    */
  def buildCredential(code: String, user: User): GoogleCredential = {
    val response: HttpResponse[String] = Http(tokenUrlBase).postForm(Seq(
      "code" -> code,
      "client_id" -> credentials.clientId,
      "client_secret" -> credentials.clientSecret,
      "redirect_uri" -> credentials.redirectUrl,
      "grant_type" -> "authorization_code",
      "access_type" -> "offline"
    )).asString

    val tokenData = response.code match {
      case 200 => Json.fromJson[TokenResponse](response.body, true)
      case _ => throw new Exception("OAuth Failed with code %d: %s".format(response.code, response.body))
    }

    GoogleCredential(
      user.email,
      tokenData.accessToken,
      tokenData.refreshToken
    )
  }

  def refreshCredential(googleCredential: GoogleCredential): GoogleCredential = {
    val response: HttpResponse[String] = Http(tokenUrlBase).postForm(Seq(
      "refresh_token" -> googleCredential.refreshToken,
      "client_id" -> credentials.clientId,
      "client_secret" -> credentials.clientSecret,
      "grant_type" -> "refresh_token"
    )).asString

    val tokenData = response.code match {
      case 200 => Json.fromJson[RefreshTokenResponse](response.body, true)
      case _ => throw new Exception("OAuth Failed with code %d: %s".format(response.code, response.body))
    }
    googleCredential.copy(accessToken = tokenData.accessToken)
  }

}

